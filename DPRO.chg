"16:04:29, 19 June 2022: Compressed sources"!

"Ensure all structures have calculated size to avoid recompilation messages later"
ExternalStructure allSubclasses do: [:e | e ensureDefined]!

SessionManager current bootFinished!

DevelopmentSessionManager installNew!

SessionManager current defaultResourceLibrary loadFlags: 0.
SessionManager current stashBootInfo!

"Mark all the booted packages as base"
Package manager markAllPackagesAsBase!

"Save the booted image"
| devsesh |
SourceManager default flushChanges.
devsesh := SessionManager current.
devsesh onPreSaveImage.
[devsesh primSnapshot: devsesh imageFileName
	backup: false
	type: 0
	maxObjects: 24576*1024
] ensure: [devsesh onPostSaveImage]!

"Remove unnecessary .chg files"
File delete: 'DBOOT.chg'!

SessionManager current onExit; primQuit: 0!

"18:55:03, 10 May 2024: Dolphin Smalltalk Professional started"!

Object subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Bill guid: (GUID fromString: '{fd853cff-d3a6-41a2-b20b-6e0ba793feda}')!
Bill comment: ''!
!Bill categoriesForClass!Kernel-Objects! !
!Bill methodsFor!
initialize! !
!Bill categoriesFor: #initialize!public! !

Object subclass: #Bill
    instanceVariableNames: 'basicMonthlyFee calls'
    classVariableNames: ''
    poolDictionaries: ''
    category: 'CallBilling'
!

!Bill methodsFor!
initialize
"Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
"Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
"Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
"Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
addCall: aCall
    "Adding a call to the bill"
    calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

!Bill methodsFor!
totalCost
    "Calculate the total cost of the bill. totalCost will be equal the sum of the basic monthly fee and the cost of the calls"
    | totalCallCost |
    totalCallCost := calls inject: 0 into: [:sum :call | sum + call cost].
    ^ basicMonthlyFee + totalCallCost.! !
!Bill categoriesFor: #totalCost!public! !

Object subclass: #Call
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Call guid: (GUID fromString: '{75ed1fe5-952a-47ca-94d2-1901160d8353}')!
Call comment: ''!
!Call categoriesForClass!Kernel-Objects! !
Object subclass: #Call
	instanceVariableNames: 'duration type source destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Object subclass: #Call
	instanceVariableNames: 'duration type source destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Object subclass: #Call
	instanceVariableNames: 'duration type origin destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Object subclass: #Call
	instanceVariableNames: 'duration type origin destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Call removeFromSystem!

Object subclass: #Call
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Call guid: (GUID fromString: '{4476514e-6693-4ee3-ad04-3c556687d3ab}')!
Call comment: ''!
!Call categoriesForClass!Kernel-Objects! !
Object subclass: #Call
	instanceVariableNames: 'duration type origin destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Object subclass: #Call
	instanceVariableNames: 'duration type origin destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Object subclass: #Call
    instanceVariableNames: 'duration type source destination'
    classVariableNames: ''
    poolDictionaries: ''
    category: 'CallBilling'
!

Object subclass: #Call
	instanceVariableNames: 'duration type source destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	category: 'CallBilling'!

Call removeFromSystem!

Object subclass: #Call
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Call guid: (GUID fromString: '{21df2f8f-0d7d-493f-85a8-71818783a4c7}')!
Call comment: ''!
!Call categoriesForClass!Kernel-Objects! !
Object subclass: #Call
	instanceVariableNames: 'duration type source destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Call
	instanceVariableNames: 'duration type source destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Call methodsFor!
initializeDuration: aDuration type: aType source: aSource destination: aDestination
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    type := aType.
    source := aSource.
    destination := aDestination.! !
!Call categoriesFor: #initializeDuration:type:source:destination:!public! !

!Call methodsFor!
cost
"Returns 0 by default in base classs"
^0! !
!Call categoriesFor: #cost!public! !

Call subclass: #LocalCall
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
LocalCall guid: (GUID fromString: '{56af0736-31c9-482c-9eb4-75389ed7a7f7}')!
LocalCall comment: ''!
!LocalCall categoriesForClass!Kernel-Objects! !
Call subclass: #LocalCall
	instanceVariableNames: ''
	classVariableNames: 'bussinesCost normalCost weekendCost '
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #LocalCall
	instanceVariableNames: ''
	classVariableNames: 'BUSINESS_COST NORMAL_COST WEEKEND_COST'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #LocalCall
	instanceVariableNames: ''
	classVariableNames: 'BUSINESS_COST NORMAL_COST WEEKEND_COST'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!LocalCall methodsFor!
initialize
"Initialize the cost per minute for local calls "
BUSINESS_COST  := 0.20.
NORMAL_COST := 0.10.
WEEKEND_COST := 0.10.! !
!LocalCall categoriesFor: #initialize!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := self costPerMinuteForHour: (Time now hour) day: (Date today dayOfWeek).
    ^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

!LocalCall methodsFor!
costPerMinuteForHour: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinuteForHour:day:!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := self costPerMinute: (Time now hour) day: (Date today dayOfWeek).
    ^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
	ifTrue: [aDay between: 1 and: 5 "Monday to Friday" ifTrue: [LocalCall class BUSINESS_COST] ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
	ifTrue: [aDay between: 1 and: 5 "Monday to Friday" ifTrue: [LocalCall class BUSINESS_COST] ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

Call subclass: #NationalCall
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
NationalCall guid: (GUID fromString: '{c3d32f06-accd-4a82-a11c-ea2927c33111}')!
NationalCall comment: ''!
!NationalCall categoriesForClass!Kernel-Objects! !
Call subclass: #NationalCall
	instanceVariableNames: ''
	classVariableNames: 'COST_PER_MINUTE'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: ''
	classVariableNames: 'COST_PER_MINUTE'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!NationalCall methodsFor!
initialize
"Initialize the cost per minuto of national calls depending location of call destinations"
COST_PER_MINUTE := 0.30 "Default cost picked by me"! !
!NationalCall categoriesFor: #initialize!public! !

Call subclass: #NationalCall
	instanceVariableNames: 'destination destinatioCost'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: ' destinatioCost'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Call
	instanceVariableNames: 'duration type source '
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: 'destination destinatioCost'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: 'destination destinationCost'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: 'destination destinationCosts'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!NationalCall methodsFor!
initialize
"Initialize the costs per minute for national calls to different destinations"
    destinationCosts := Dictionary new.
    destinationCosts
        at: 'City1' put: 0.25;
        at: 'City2' put: 0.30;
        at: 'City3' put: 0.35;
        at: 'City4' put: 0.40;
        at: 'City5' put: 0.45.! !
!NationalCall categoriesFor: #initialize!public! !

!NationalCall methodsFor!
initialize
"Initialize the costs per minute for national calls to different destinations"
    destinationCosts := Dictionary new.
    destinationCosts
        at: 'Rosario' put: 0.25;
        at: 'Mendoza' put: 0.27;
        at: 'Bariloche' put: 0.30;
        at: 'Mar del plata' put: 0.22;
        at: 'Cordoba capital' put: 0.32.! !
!NationalCall categoriesFor: #initialize!public! !

Object subclass: #Call
	instanceVariableNames: 'duration type origin'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Call methodsFor!
initializeDuration: aDuration type: aType source: aOrigin 
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    type := aType.
    origin := aOrigin .
! !
!Call categoriesFor: #initializeDuration:type:source:!public! !

!Call methodsFor!
initializeDuration: aDuration type: aType source: aOrigin 
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    type := aType.
    origin := aOrigin .
! !
!Call categoriesFor: #initializeDuration:type:source:!public! !

!Call methodsFor!
initializeDuration: aDuration type: aType source: aOrigin 
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    type := aType.
    origin := aOrigin .
! !
!Call categoriesFor: #initializeDuration:type:source:!public! !

!Call methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    type := aType.
    origin := aOrigin.! !
!Call categoriesFor: #initializeDuration:type:origin:!public! !

Call removeSelector: #initializeDuration:type:source:destination: ifAbsent: []!

Call subclass: #NationalCall
	instanceVariableNames: ''
	classVariableNames: 'destinationCosts'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: ''
	classVariableNames: 'DESTINATION_COSTS'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!NationalCall class methodsFor!
initialize
"Initialize the costs per minute for national calls to different destinations"
    DESTINATION_COSTS := Dictionary new.
    DESTINATION_COSTS
        at: 'Rosario' put: 0.25;
        at: 'Mendoza' put: 0.27;
        at: 'Bariloche' put: 0.30;
        at: 'Mar del plata' put: 0.22;
        at: 'Cordoba capital' put: 0.32.! !
!NationalCall class categoriesFor: #initialize!public! !

NationalCall removeSelector: #initialize ifAbsent: []!

!NationalCall class methodsFor!
initializeDuration: aDuration source: aSource destination: aDestination
    "Initialize the call with its duration, source, and destination"
    ^ self new
        duration: aDuration;
        source: aSource;
        destination: aDestination;
        yourself
! !
!NationalCall class categoriesFor: #initializeDuration:source:destination:!public! !

Call removeSelector: #initializeDuration:type:source: ifAbsent: []!

NationalCall removeFromSystem!

Call subclass: #NationalCall
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
NationalCall guid: (GUID fromString: '{377a348b-672b-4d4b-a5e4-17888475f749}')!
NationalCall comment: ''!
!NationalCall categoriesForClass!Kernel-Objects! !
Call subclass: #NationalCall
	instanceVariableNames: 'destination'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Inicializa la llamada nacional con su duración, tipo, origen y destino."
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

!NationalCall methodsFor!
cost
    "Calculate total cost based on destination"
    | costPerMinute |
    costPerMinute := self calculateCostPerMinuteForDestination: destination.
    ^ duration * costPerMinute! !
!NationalCall categoriesFor: #cost!public! !

Call subclass: #NationalCall
	instanceVariableNames: 'destination'
	classVariableNames: 'destinationCosts'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #NationalCall
	instanceVariableNames: 'destination'
	classVariableNames: 'DESTINATION_COSTS'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!NationalCall methodsFor!
calculateCostPerMinuteForDestination: aDestination
    "Calculate the cost per minute of national calls depending the destination location."
    | costPerMinute |
    DESTINATION_COSTS := Dictionary new.
    DESTINATION_COSTS
	at: 'Buenos Aires' put: 0.20;
	at: 'Córdoba' put: 0.18;
	at: 'Rosario' put: 0.22;
	at: 'Mendoza' put: 0.25;
	at: 'Mar del Plata' put: 0.30.
    costPerMinute := 0.15. "Costo ficticio, debes reemplazarlo con la lógica correcta."
    ^ costPerMinute! !
!NationalCall categoriesFor: #calculateCostPerMinuteForDestination:!public! !

!NationalCall methodsFor!
calculateCostPerMinuteForDestination: aDestination
    "Calculate the cost per minute of national calls depending the destination location."
    | costPerMinute |
    DESTINATION_COSTS := Dictionary new.
    DESTINATION_COSTS
	at: 'Buenos Aires' put: 0.20;
	at: 'Córdoba' put: 0.28;
	at: 'Rosario' put: 0.22;
	at: 'Mendoza' put: 0.25;
	at: 'Mar del Plata' put: 0.30.
   costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
    ^ costPerMinute! !
!NationalCall categoriesFor: #calculateCostPerMinuteForDestination:!public! !

!NationalCall methodsFor!
calculateCostPerMinuteForDestination: aDestination
    "Calculate the cost per minute of national calls depending the destination location."
    | costPerMinute |
    DESTINATION_COSTS := Dictionary new.
    DESTINATION_COSTS
	at: 'Buenos Aires' put: 0.20;
	at: 'Córdoba' put: 0.28;
	at: 'Rosario' put: 0.22;
	at: 'Mendoza' put: 0.25;
	at: 'Mar del Plata' put: 0.30.
   costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
    ^ costPerMinute! !
!NationalCall categoriesFor: #calculateCostPerMinuteForDestination:!public! !

!NationalCall methodsFor!
calculateCostPerMinuteForDestination: aDestination
    "Calculate the cost per minute of national calls depending the destination location."
    | costPerMinute |
    DESTINATION_COSTS := Dictionary new.
    DESTINATION_COSTS
	at: 'Buenos Aires' put: 0.20;
	at: 'Córdoba' put: 0.28;
	at: 'Rosario' put: 0.22;
	at: 'Mendoza' put: 0.25;
	at: 'Mar del Plata' put: 0.30.
   costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
    ^ costPerMinute! !
!NationalCall categoriesFor: #calculateCostPerMinuteForDestination:!public! !

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Initialize the national call "
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Initialize the national call "
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Initialize the national call "
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Initialize the national call "
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

"21:49:34, 10 May 2024: Image saved"!

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Initialize the national call "
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

!NationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination
    "Initialize the national call "
    super initializeDuration: aDuration type: aType origin: aOrigin.
    destination := aDestination.
! !
!NationalCall categoriesFor: #initializeDuration:type:origin:destination:!public! !

"21:49:39, 10 May 2024: Image saved"!

"21:50:11, 10 May 2024: Image saved"!

"09:43:37, 11 May 2024: Dolphin Smalltalk Professional started"!

Call subclass: #InternationalCall
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
InternationalCall guid: (GUID fromString: '{aa9cbc2e-a25d-4a90-92cb-3d751d4d1373}')!
InternationalCall comment: ''!
!InternationalCall categoriesForClass!Kernel-Objects! !
Call subclass: #InternationalCall
	instanceVariableNames: 'destination country'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!InternationalCall methodsFor!
initializeDuration: aDuration type: aType origin: aOrigin destination: aDestination country: aCountry
	"Initialize international call with duration, type, origin, destination and country"
	super initializeDuration: aDuration type: aType origin: aOrigin.
	destination := aDestination.
	country := aCountry.! !
!InternationalCall categoriesFor: #initializeDuration:type:origin:destination:country:!public! !

!InternationalCall methodsFor!
cost 
"Calculate international call cost based on destination and country"
	| costPerMinute |
	costPerMinute := self calculateCostPerMinuteInternational: country.
	^duration * costPerMinute
! !
!InternationalCall categoriesFor: #cost!public! !

!InternationalCall methodsFor!
cost 
"Calculate international call cost based on destination and country"
	| costPerMinute |
	costPerMinute := self calculateCostPerMinuteInternational: country.
	^duration * costPerMinute
! !
!InternationalCall categoriesFor: #cost!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!InternationalCall methodsFor!
calculateCostPerMinuteIInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteIInternational:!public! !

!LocalCall methodsFor!
costPerMinuteForHour: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinuteForHour:day:!public! !

!LocalCall methodsFor!
costPerMinuteForHour: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinuteForHour:day:!public! !

!LocalCall methodsFor!
costPerMinuteForHour: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinuteForHour:day:!public! !

!LocalCall methodsFor!
costPerMinuteForHour: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [aDay between: 1 and: 5 "Monday to Friday. We will take mondays as first day of the week" 
                    ifTrue: [LocalCall class BUSINESS_COST] 
                    ifFalse: [LocalCall class NORMAL_COST]]
        ifFalse: [LocalCall class WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinuteForHour:day:!public! !

Object subclass: #CallBillingSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CallBillingSystem guid: (GUID fromString: '{70b94333-3c65-4580-bdb8-c74ee873ed8f}')!
CallBillingSystem comment: ''!
!CallBillingSystem categoriesForClass!Kernel-Objects! !
Object subclass: #CallBillingSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 LocalCall2 LocalCall3 IntCall1 IntCall2 IntCall3 NatCall1 NatCall2 totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.
	LocalCall2 := LocalCall new.
	LocalCall3 := LocalCall new.
! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

	! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.
	! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.
	! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.
	! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.
	! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.
	! !
!CallBillingSystem class categoriesFor: #run!public! !

!

	!

	!

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 I NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.! !
!CallBillingSystem class categoriesFor: #run!public! !

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.! !
!CallBillingSystem class categoriesFor: #run!public! !

!

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill LocalCall1 IntCall1 NatCall1  totalCost |
	"Create an instance of Bill to save calls and costs"
	bill := Bill new.
	"Create instances of diferent types of calls  "
	LocalCall1 := LocalCall new.
	LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

	NatCall1 := NationalCall new.
	NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.
	
	IntCall1 := InternationalCall new.
	IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

	"Adding calls into the bill."
	bill addCall: LocalCall1.
	bill addCall: NatCall1.
	bill addCall: IntCall1.

	"Calculate total cost of bill."
	totalCost := bill totalCost.

	"Show the bill."
	Transcript show: 'Total cost of the bill: ', totalCost asString; cr.
! !
!CallBillingSystem class categoriesFor: #run!public! !

"10:43:50, 11 May 2024: Image saved"!

CallBillingSystem run.!

CallBillingSystem run.!

	| bill LocalCall1 IntCall1 NatCall1  totalCost |!

	bill := Bill new.!

!

!

!

CallBillingSystem run.!

!

!

bill := Bill new.!

LocalCall1 := LocalCall new.!

bill addCall: LocalCall1.!

!

!

!

!

nil!

bill addCall: LocalCall1.!

!

!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: LocalCall1.
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!

Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.!

Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.!

Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.!

!

!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: LocalCall1.
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: LocalCall1.
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: LocalCall1.
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: LocalCall1.
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!

Transcript show: 'Hola'!

Transcript show: 'Hola'!

Transcript show: 'Hola'!

Prompter prompt: 'INgresa tu nombre'!

Transcript show: 'Mi nombre es tomas'!

Transcript show: 'Mi nombre es tomas'; cr.!

Transcript show: 'Mi nombre es tomas' cr.!

"Adding calls into the bill."!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.
bill addCall: LocalCall1.
Transcript show: 'Llamada local añadida'
!

Bill removeSelector: #addCall: ifAbsent: []!

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.
bill addCall: LocalCall1.
Transcript show: 'Llamada local añadida'
!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.
!

| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.

"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.
bill addCall: LocalCall1.
Transcript show: 'Llamada local añadida'
!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.
"Crear instancias de llamadas y agregar mensajes de depuración"
Transcript show: 'Creando instancia de LocalCall...'; cr.
LocalCall1 := LocalCall new.
Transcript show: 'Instancia de LocalCall creada exitosamente.'; cr.

Transcript show: 'Creando instancia de NationalCall...'; cr.
NatCall1 := NationalCall new.
Transcript show: 'Instancia de NationalCall creada exitosamente.'; cr.

Transcript show: 'Creando instancia de InternationalCall...'; cr.
IntCall1 := InternationalCall new.
Transcript show: 'Instancia de InternationalCall creada exitosamente.'; cr.!

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.
    Transcript show: 'Bill initialized with calls: ', calls printString; cr.
! !
!Bill categoriesFor: #initialize!public! !

!

 super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.
    Transcript show: 'Bill initialized with calls: ', calls printString; cr.!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.
"Crear instancias de llamadas y agregar mensajes de depuración"
Transcript show: 'Creando instancia de LocalCall...'; cr.
LocalCall1 := LocalCall new.
Transcript show: 'Instancia de LocalCall creada exitosamente.'; cr.

Transcript show: 'Creando instancia de NationalCall...'; cr.
NatCall1 := NationalCall new.
Transcript show: 'Instancia de NationalCall creada exitosamente.'; cr.

Transcript show: 'Creando instancia de InternationalCall...'; cr.
IntCall1 := InternationalCall new.
Transcript show: 'Instancia de InternationalCall creada exitosamente.'; cr.
"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.
bill addCall: LocalCall1.
Transcript show: 'Llamada local añadida'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!


| bill LocalCall1 IntCall1 NatCall1  totalCost |
"Create an instance of Bill to save calls and costs"
"Debugging messages"
Transcript show: 'Creating an instance of Bill...'; cr.
bill := Bill new.
Transcript show: 'Instance of Bill created successfully.'; cr.
"Crear instancias de llamadas y agregar mensajes de depuración"
Transcript show: 'Creando instancia de LocalCall...'; cr.
LocalCall1 := LocalCall new.
Transcript show: 'Instancia de LocalCall creada exitosamente.'; cr.

Transcript show: 'Creando instancia de NationalCall...'; cr.
NatCall1 := NationalCall new.
Transcript show: 'Instancia de NationalCall creada exitosamente.'; cr.

Transcript show: 'Creando instancia de InternationalCall...'; cr.
IntCall1 := InternationalCall new.
Transcript show: 'Instancia de InternationalCall creada exitosamente.'; cr.
"Create instances of diferent types of calls  "
LocalCall1 := LocalCall new.
LocalCall1 initializeDuration: 16 type: 'Local 'origin: 'Casilda'.
bill addCall: LocalCall1.
Transcript show: 'Llamada local añadida'.

NatCall1 := NationalCall new.
NatCall1 initializeDuration: 8 type: 'National' origin: 'Santa Fe' destination: 'Mendoza'.

IntCall1 := InternationalCall new.
IntCall1 initializeDuration: 25 type: 'International' origin: 'San Martin de los Andes' destination: 'Japan' country: 'UK'.

"Adding calls into the bill."
bill addCall: NatCall1.
bill addCall: IntCall1.

"Calculate total cost of bill."
totalCost := bill totalCost.

"Show the bill."
Transcript show: 'Total cost of the bill: ', totalCost asString; cr.

!

!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con exito'.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
bill addCall: localCall.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con exito'.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
bill addCall: localCall.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
Transcript show: 'Instancia de LocalCall: ', localCall superclass;cr.!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
Transcript show: 'Instancia de LocalCall SUPERCLASE: ', localCall superclass;cr.

"Intentar agregar la llamada local a la factura"!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

"12:53:04, 11 May 2024: Image saved"!

"12:53:27, 11 May 2024: Image saved"!

"12:53:32, 11 May 2024: Image saved"!

"12:53:36, 11 May 2024: Image saved"!

"12:53:40, 11 May 2024: Image saved"!

"16:08:41, 11 May 2024: Dolphin Smalltalk Professional started"!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

Transcript show: 'Agregando llamada local al bill...'; cr.!

| factura localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
factura := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', factura printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.!

| bill localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| factura localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
factura := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', factura printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
factura addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := factura totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| factura localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
factura := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', factura printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
factura addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := factura totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| factura localCall nationalCall internationalCall totalCost |

"Crear una instancia de Bill"
factura := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', factura printString; cr.

"Crear instancias de diferentes tipos de llamadas"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
factura addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.

"Calcular el costo total de la factura"
totalCost := factura totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.!

!Bill methodsFor!
call
"Returns calls from a Bill"
	^calls! !
!Bill categoriesFor: #call!public! !

!Bill methodsFor!
call
"Returns calls from a Bill"
	^calls! !
!Bill categoriesFor: #call!public! !

!Bill methodsFor!
calls
"Returns calls from a Bill"
	^calls! !
!Bill categoriesFor: #calls!public! !

Bill removeSelector: #call ifAbsent: []!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
(localCall isNil or: [localCall class ~= LocalCall]) 
    ifTrue: [Transcript show: 'Error: Se proporcionó una instancia no válida de LocalCall.'; cr.]
    ifFalse: [bill addCall: localCall.
              Transcript show: 'Llamada local añadida correctamente.'; cr.].
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
"Intentar agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
(localCall isNil or: [localCall class ~= LocalCall]) 
    ifTrue: [Transcript show: 'Error: Se proporcionó una instancia no válida de LocalCall.'; cr.]
    ifFalse: [bill addCall: localCall.
              Transcript show: 'Llamada local añadida correctamente.'; cr.].
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.

"Mostrar el costo total de la factura"
Transcript show: 'Costo total de la factura: ', totalCost printString; cr.
!

"21:09:26, 11 May 2024: Image saved"!

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

"21:09:38, 11 May 2024: Image saved"!

"21:09:41, 11 May 2024: Image saved"!

"21:09:46, 11 May 2024: Image saved"!

"21:09:50, 11 May 2024: Image saved"!

"10:44:26, 12 May 2024: Dolphin Smalltalk Professional started"!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"
Transcript show: 'Instancia de Bill: ', bill printString; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.!

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	Transcript show: 'Agregando la llamada al bill...'; cr.
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
    super initialize.
    Transcript show: 'Inicializando Bill...'; cr.
    basicMonthlyFee := 0.
    calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.
!

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	Transcript show: 'Entro al metodo INITIALIZE del Bill'; cr.
	super initialize.
	Transcript show: 'Inicializando Bill...'; cr.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	Transcript show: 'Entro al metodo INITIALIZE del Bill'; cr.
	super initialize.
	Transcript show: 'Inicializando Bill...'; cr.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	Transcript show: 'Entro al metodo INITIALIZE del Bill'; cr.
	super initialize.
	Transcript show: 'Inicializando Bill...'; cr.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	Transcript show: 'Entro al metodo INITIALIZE del Bill'; cr.
	super initialize.
	Transcript show: 'Inicializando Bill...'; cr.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	Transcript show: 'Entro al metodo INITIALIZE del Bill'; cr.
	super initialize.
	Transcript show: 'Inicializando Bill...'; cr.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	Transcript show: 'Entro al metodo INITIALIZE del Bill'; cr.
	super initialize.
	Transcript show: 'Inicializando Bill...'; cr.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.
!

| nuevoBill |

nuevoBill := Bill new.
Transcript show: 'Aca el nuevo bill esta creado...';cr.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

!CallBillingSystem class methodsFor!
run 
"Main method to run the call billing system."
	| bill localCall totalCost |

	"Crear una instancia de Bill"
	bill := Bill new.
	Transcript show: 'Bill creada con éxito.'; cr.

	"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


	"Crear una instancia de LocalCall"
	localCall := LocalCall new.
	localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
	Transcript show: 'LocalCall creada con éxito.'; cr.

	"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
	Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

	"Agregar la llamada local a la factura"
	Transcript show: 'Agregando llamada local al bill...'; cr.
	Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
	bill addCall: localCall.
	Transcript show: 'Llamada local añadida correctamente.'; cr.
	Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

	"Calcular el costo total de la factura"
	totalCost := bill totalCost.
! !
!CallBillingSystem class categoriesFor: #run!public! !

CallBillingSystem run.!

!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill class.
Transcript show: 'Bill creada con éxito.'; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill class.!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Imprimir la instancia de Bill para verificar que se haya creado correctamente"


"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.!

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := LocalCall WEEKEND_COST. "Asignar costo de fin de semana por defecto"
    
    "Determinar el costo por minuto basado en el día de la semana y la hora"
    costPerMinute := (anHour between: 8 and: 20) "Horario de oficina (lunes a viernes)"
        ifTrue: [
            (aDay between: 1 and: 5) "Lunes a viernes"
                ifTrue: [LocalCall BUSINESS_COST] "Costo de negocio"
                ifFalse: [LocalCall NORMAL_COST] "Costo normal"
        ]
        ifFalse: [LocalCall WEEKEND_COST]. "Fin de semana"

    ^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := 0.10. "Asignar costo de fin de semana por defecto"
    "Determinar el costo por minuto basado en el día de la semana y la hora"
    costPerMinute := (anHour between: 8 and: 20) "Horario de oficina (lunes a viernes)"
        ifTrue: [
            (aDay between: 1 and: 5) "Lunes a viernes"
                ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
                ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
        ]
        ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

    ^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinuteForHour: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := (anHour between: 8 and: 20) 
        ifTrue: [(aDay between: 1 and: 5 )"Monday to Friday. We will take mondays as first day of the week" 
                    ifTrue: [costPerMinute := BUSINESS_COST] 
                    ifFalse: [costPerMinute := NORMAL_COST]]
        ifFalse: [costPerMinute := WEEKEND_COST].
    ^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinuteForHour:day:!public! !

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

| bill localCall totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall := LocalCall new.
localCall initializeDuration: 16 type: 'Local' origin: 'Casilda'.
Transcript show: 'LocalCall creada con éxito.'; cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

"Calcular el costo total de la factura"
totalCost := bill totalCost.
!

LocalCall removeSelector: #costPerMinuteForHour:day: ifAbsent: []!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := self costPerMinute: (Time now hour) day: (Date today dayOfWeek).
    ^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

Object subclass: #Call
	instanceVariableNames: 'duration day origin'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Call
	instanceVariableNames: 'duration day origin'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Call methodsFor!
initializeDuration: aDuration day: aDay origin: aOrigin
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    day := aDay .
    origin := aOrigin.! !
!Call categoriesFor: #initializeDuration:day:origin:!public! !

Call removeSelector: #initializeDuration:type:origin: ifAbsent: []!

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := 0.10. 
    "Determinar el costo por minuto basado en el día de la semana y la hora"
    costPerMinute := (anHour between: 8 and: 20) "Horario de oficina (lunes a viernes)"
        ifTrue: [
            (aDay between: 1 and: 5) "Lunes a viernes"
                ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
                ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
        ]
        ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

    ^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!LocalCall methodsFor!
costPerMinute: anHour day: aDay
    "Return the cost per minute depending the hour and the day of the week"
    | costPerMinute |
    costPerMinute := 0.10. 
    "Determinar el costo por minuto basado en el día de la semana y la hora"
    costPerMinute := (anHour between: 8 and: 20) "Horario de oficina (lunes a viernes)"
        ifTrue: [
            (aDay between: 1 and: 5) "Lunes a viernes"
                ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
                ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
        ]
        ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

    ^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute:day:!public! !

!Call methodsFor!
loadCall: aDuration day: aDay origin: aOrigin
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    day := aDay .
    origin := aOrigin.! !
!Call categoriesFor: #loadCall:day:origin:!public! !

!Call methodsFor!
loadCall: aDuration day: aDay origin: aOrigin
    "Initialize the call with its duration, type, source, and destination"
    super initialize.
    duration := aDuration.
    day := aDay. "Days of week starts at Mondays as number 1"
    origin := aOrigin.! !
!Call categoriesFor: #loadCall:day:origin:!public! !

"12:32:42, 12 May 2024: Image saved"!

"12:33:08, 12 May 2024: Image saved"!

"12:33:11, 12 May 2024: Image saved"!

"12:33:15, 12 May 2024: Image saved"!

"15:37:04, 12 May 2024: Dolphin Smalltalk Professional started"!

!LocalCall methodsFor!
cost: aDay 
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := self costPerMinute: (Time now hour) day: (Date today dayOfWeek).
    ^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost:!public! !

!LocalCall methodsFor!
cost: anHour day: aDay 
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := self costPerMinute: (Time now hour) day: (Date today dayOfWeek).
    ^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost:day:!public! !

LocalCall removeSelector: #cost: ifAbsent: []!

!LocalCall methodsFor!
cost: anHour day: aDay 
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := (self costPerMinute: anHour day: aDay) asNumber.
    ^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost:day:!public! !

!LocalCall methodsFor!
cost: anHour day: aDay 
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := (self costPerMinute: anHour day: aDay) asNumber.
    ^ (duration * costPerMinute) asNumber.
! !
!LocalCall categoriesFor: #cost:day:!public! !

LocalCall removeSelector: #cost ifAbsent: []!

!LocalCall methodsFor!
cost: anHour day: aDay 
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
    | costPerMinute |
    costPerMinute := (self costPerMinute: anHour day: aDay) asNumber.
    ^ (duration * costPerMinute) asNumber.
! !
!LocalCall categoriesFor: #cost:day:!public! !

| bill localCall1 totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

| bill localCall1 totalCost |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

precio

!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.
!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := (self costPerMinute: callDuration day: callDay ) asNumber.
	^ (duration * costPerMinute) asNumber.
! !
!LocalCall categoriesFor: #cost!public! !

LocalCall removeSelector: #cost:day: ifAbsent: []!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  |
	costPerMinute := 0.10. 
	callDay := super day.
	"Determinar el costo por minuto basado en el día de la semana y la hora"
	costPerMinute := (callDay between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

LocalCall removeSelector: #costPerMinute:day: ifAbsent: []!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := (self costPerMinute: callDuration day: callDay ) asNumber.
	^ (duration * costPerMinute) asNumber.
! !
!LocalCall categoriesFor: #cost!public! !

!Call methodsFor!
day
"Returns the day of the call"
	^day! !
!Call categoriesFor: #day!public! !

!Call methodsFor!
duration 
"Returns the duration of the call"
	^duration! !
!Call categoriesFor: #duration!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := (self costPerMinute: callDuration day: callDay ) asNumber.
	^ (duration * costPerMinute) asNumber.
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := (self costPerMinute ) asNumber.
	^ (duration * costPerMinute) asNumber.
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 2 origin: 'Casilda'.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := (self costPerMinute ) asNumber.
	^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

Object subclass: #Call
	instanceVariableNames: 'duration day origin startTime'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Call methodsFor!
startTime
"Returns start time of the call"
	^ startTime! !
!Call categoriesFor: #startTime!public! !

!Call methodsFor!
startTime
"Returns start time of the call"
	^ startTime! !
!Call categoriesFor: #startTime!public! !

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  StartTime |
	costPerMinute := 0.10. 
	callDay := super day.
	StartTime  := super startTime.
	"Determinar el costo por minuto basado en el día de la semana y la hora"
	costPerMinute := (callDay between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startTime |
	costPerMinute := 0.10. 
	callDay := super day.
	startTime  := super startTime.
	"Determinar el costo por minuto basado en el día de la semana y la hora"
	costPerMinute := (startTime  between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

!Call methodsFor!
initializeDuration: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #initializeDuration:day:origin:startTime:!public! !

!Call methodsFor!
initializeDuration: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #initializeDuration:day:origin:startTime:!public! !

!Call methodsFor!
initializeDuration: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #initializeDuration:day:origin:startTime:!public! !

!Call methodsFor!
initializeDuration: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #initializeDuration:day:origin:startTime:!public! !

!Call methodsFor!
initializeDuration: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #initializeDuration:day:origin:startTime:!public! !

Call removeSelector: #initializeDuration:day:origin: ifAbsent: []!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12
Transcript show: 'LocalCall creada con exito.... ';cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.
!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	^ duration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.
!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	Transcript show: 'CostPerMinute es: ', costPerMinute class.
	Transcript show: 'CallDuration es: ', callDuration class.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	Transcript show: 'CostPerMinute es: ', costPerMinute class.
	Transcript show: 'CallDuration es: ', callDuration class.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	Transcript show: 'CostPerMinute es: ', costPerMinute class.
	Transcript show: 'CallDuration es: ', callDuration class.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	Transcript show: 'CostPerMinute es: ', costPerMinute class.
	Transcript show: 'CallDuration es: ', callDuration class.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.
!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := (self costPerMinute) asNumber .
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startTime |
	costPerMinute := 0.10. 
	callDay := super day.
	startTime  := super startTime.
	"Determinar el costo por minuto basado en el día de la semana y la hora"
	costPerMinute := (startTime  between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ costPerMinute asNumber! !
!LocalCall categoriesFor: #costPerMinute!public! !

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.
Transcript show: 'Bill creada con éxito.'; cr.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.
Transcript show: 'LocalCall creada con exito.... ';cr.

"Imprimir la instancia de LocalCall para verificar que se haya creado correctamente"
Transcript show: 'Instancia de LocalCall: ', localCall1 printString; cr.

"Agregar la llamada local a la factura"
Transcript show: 'Agregando llamada local al bill...'; cr.
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Llamada local añadida correctamente.'; cr.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	Transcript show: 'callDay es un: ', callDay class.
	Transcript show: 'calDuration es un', callDuration class.
	costPerMinute := self costPerMinute.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 cost.
!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	Transcript show: 'callDay es de la clase:  ', callDay class.
	Transcript show: 'callDuration es de la clase:  ',callDuration class.
	costPerMinute := self costPerMinute.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1 self cost.
!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	callDay := super day.
	costPerMinute := self costPerMinute.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1  cost.
!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startTime |
	costPerMinute := 0.10. 
	callDay := super day.
	startTime  := super startTime.
	"Determinar el costo por minuto basado en el día de la semana y la hora"
	costPerMinute := (startTime  between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1  cost.

!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', localCall1  costPerMinute.

!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ costPerMinute! !
!LocalCall categoriesFor: #costPerMinute!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ (costPerMinute ) asNumber asFloat.! !
!LocalCall categoriesFor: #costPerMinute!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := ((BUSINESS_COST) asNumber ) asFloat ] "Costo de negocio"
		ifFalse: [costPerMinute := ((NORMAL_COST) asNumber ) asFloat ] "Costo normal"
	]
	ifFalse: [costPerMinute:= ((WEEKEND_COST) asNumber) asFloat ]. "Fin de semana"

	^ costPerMinute .! !
!LocalCall categoriesFor: #costPerMinute!public! !

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := ((BUSINESS_COST) asNumber ) asFloat ] "Costo de negocio"
		ifFalse: [costPerMinute := ((NORMAL_COST) asNumber ) asFloat ] "Costo normal"
	]
	ifFalse: [costPerMinute:= ((WEEKEND_COST) asNumber) asFloat ]. "Fin de semana"

	^ costPerMinute .! !
!LocalCall categoriesFor: #costPerMinute!public! !

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := ((BUSINESS_COST) asNumber ) asFloat ] "Costo de negocio"
		ifFalse: [costPerMinute := ((NORMAL_COST) asNumber ) asFloat ] "Costo normal"
	]
	ifFalse: [costPerMinute:= ((WEEKEND_COST) asNumber) asFloat ]. "Fin de semana"

	^ costPerMinute .! !
!LocalCall categoriesFor: #costPerMinute!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.

!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

!LocalCall methodsFor!
costPerMinute
    "Return the cost per minute depending the hour and the day of the week"
	| costPerMinute callDay  startT |
	costPerMinute := 0.10. 
	callDay := super day.
	startT  := super startTime.
	costPerMinute := (startT between: 8 and: 20) "Horario de oficina (lunes a viernes)"
	ifTrue: [
	    (callDay between: 1 and: 5) "Lunes a viernes"
		ifTrue: [costPerMinute := BUSINESS_COST] "Costo de negocio"
		ifFalse: [costPerMinute := NORMAL_COST] "Costo normal"
	]
	ifFalse: [costPerMinute:= WEEKEND_COST]. "Fin de semana"

	^ (costPerMinute) asFloat.! !
!LocalCall categoriesFor: #costPerMinute!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 initializeDuration: 15 day: 3 origin: 'Casilda' startTime: 12.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

!Call methodsFor!
loadCall: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #loadCall:day:origin:startTime:!public! !

Call removeSelector: #initializeDuration:day:origin:startTime: ifAbsent: []!

Call removeSelector: #loadCall:day:origin: ifAbsent: []!

!Call methodsFor!
loadCall: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime! !
!Call categoriesFor: #loadCall:day:origin:startTime:!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda 'startTime: '10'

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda 'startTime: '10'

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda 'startTime: '10'.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.

!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio es: ', (localCall1 costPerMinute) printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es: ', (localCall1 cost ) printString; cr.!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es: ', (localCall1 cost ) printString; cr.
!

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.
!

!Bill methodsFor!
totalCost
	"Calculate the total cost of the bill. totalCost will be equal the sum of the basic monthly fee and the cost of the calls"
	| totalCost |
	totalCost := 0.
	calls do: [ :aCall |
		totalCost := totalCost + aCall cost.
		].
	^ basicMonthlyFee + totalCost.! !
!Bill categoriesFor: #totalCost!public! !

| bill localCall1 totalCost1 precio|

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.

totalCost1 := bill totalCost.!

| bill localCall1 localCall2 totalCost1 |

"Crear una instancia de Bill"
bill := Bill new.
bill initialize.

"Crear una instancia de LocalCall"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Agregar la llamada local a la factura"
Transcript show: 'Cantidad de llamadas en bill antes de agregar: ', bill calls size printString; cr.
bill addCall: localCall1.
bill addCall: localCall2.
Transcript show: 'Cantidad de llamadas en bill después de agregar: ', bill calls size printString; cr.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.

totalCost1 := bill totalCost.
Transcript show: 'El precio total de la factura es $', (totalCost1) printString; cr.!

!NationalCall methodsFor!
costPerMinuteForDestination: aDestination
    "Calculate the cost per minute of national calls depending the destination location."
    | costPerMinute |
    DESTINATION_COSTS := Dictionary new.
    DESTINATION_COSTS
	at: 'Buenos Aires' put: 0.20;
	at: 'Córdoba' put: 0.28;
	at: 'Rosario' put: 0.22;
	at: 'Mendoza' put: 0.25;
	at: 'Mar del Plata' put: 0.30.
   costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
    ^ costPerMinute! !
!NationalCall categoriesFor: #costPerMinuteForDestination:!public! !

NationalCall removeSelector: #calculateCostPerMinuteForDestination: ifAbsent: []!

!NationalCall methodsFor!
costPerMinuteForDestination
    "Calculate the cost per minute of national calls depending the destination location."
	| costPerMinute aDestination|
	aDestination := destination.
	DESTINATION_COSTS := Dictionary new.
	DESTINATION_COSTS
		at: 'Buenos Aires' put: 0.20;
		at: 'Córdoba' put: 0.28;
		at: 'Rosario' put: 0.22;
		at: 'Mendoza' put: 0.25;
		at: 'Mar del Plata' put: 0.30.
	costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
	^ costPerMinute! !
!NationalCall categoriesFor: #costPerMinuteForDestination!public! !

NationalCall removeSelector: #costPerMinuteForDestination: ifAbsent: []!

NationalCall removeSelector: #initializeDuration:type:origin:destination: ifAbsent: []!

!NationalCall methodsFor!
initialize
"Initialize a national call"
	! !
!NationalCall categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	super initialize.
	basicMonthlyFee := 0.
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!NationalCall methodsFor!
initialize
"Initialize a national call"
	super initialize.
	! !
!NationalCall categoriesFor: #initialize!public! !

NationalCall removeSelector: #initialize ifAbsent: []!

!NationalCall methodsFor!
loadCall: aDuration day: aDay origin: aOrigin startTime: aTime destination: aDestination
"Initialize national calls"
	self loadCall: aDuration day: aDay origin: aOrigin startTime: aTime.
	destination := aDestination.! !
!NationalCall categoriesFor: #loadCall:day:origin:startTime:destination:!public! !

!NationalCall methodsFor!
cost
    "Calculate total cost based on destination"
    | costPerMinute |
    costPerMinute := self costPerMinuteForDestination.
    ^ duration * costPerMinute! !
!NationalCall categoriesFor: #cost!public! !

!NationalCall methodsFor!
costPerMinuteForDestination
    "Calculate the cost per minute of national calls depending the destination location."
	| costPerMinute aDestination|
	aDestination := self destination.
	DESTINATION_COSTS := Dictionary new.
	DESTINATION_COSTS
		at: 'Buenos Aires' put: 0.20;
		at: 'Córdoba' put: 0.28;
		at: 'Rosario' put: 0.22;
		at: 'Mendoza' put: 0.25;
		at: 'Mar del Plata' put: 0.30.
	costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
	^ costPerMinute! !
!NationalCall categoriesFor: #costPerMinuteForDestination!public! !

!NationalCall methodsFor!
destination
"Retruns destination of national call"
	^ destination! !
!NationalCall categoriesFor: #destination!public! !

!NationalCall methodsFor!
destination
"Retruns destination of national call"
	^ destination! !
!NationalCall categoriesFor: #destination!public! !

!NationalCall methodsFor!
cost
	"Calculate total cost based on destination"
	| costPerMinute aDuration |
	aDuration := super duration.
	costPerMinute := self costPerMinuteForDestination.
	^ duration * costPerMinute! !
!NationalCall categoriesFor: #cost!public! !

!NationalCall methodsFor!
cost
	"Calculate total cost based on destination"
	| costPerMinute aDuration |
	aDuration := super duration.
	costPerMinute := self costPerMinuteForDestination.
	^ aDuration * costPerMinute! !
!NationalCall categoriesFor: #cost!public! !

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 destination ) printString; tab ,(natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
!

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
!

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
!

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
Transcript show: 'El precio total de la factura es $', (factura cost ) printString; cr.
!

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
Transcript show: 'El precio total de la factura es $', (factura cost ) printString; cr.
!

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
Transcript show: 'El precio total de la factura es $', (factura totalCost ) printString; cr.
!

|factura natCall1 natCall2 totalCost2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'El precio por minuto por llamada es: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (natCall1 cost ) printString; cr.
Transcript show: 'El precio total de la factura es $', (factura totalCost ) printString; cr.
!

!InternationalCall methodsFor!
calculateCostPerMinuteInternational: aCountry
" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts 
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90]. "If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute
		
! !
!InternationalCall categoriesFor: #calculateCostPerMinuteInternational:!public! !

InternationalCall removeSelector: #calculateCostPerMinuteIInternational: ifAbsent: []!

!InternationalCall methodsFor!
costPerMinuteInternational: aCountry
	" Calculate cost per minute for an international call based on destuination country."

	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational:!public! !

InternationalCall removeSelector: #calculateCostPerMinuteInternational: ifAbsent: []!

!InternationalCall methodsFor!
costPerMinuteInternational: aCountry
	" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts |
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational:!public! !

Call subclass: #InternationalCall
	instanceVariableNames: 'destinationCountry'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #InternationalCall
	instanceVariableNames: 'destinationCountry'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Call subclass: #InternationalCall
	instanceVariableNames: 'destinationCountry'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!InternationalCall methodsFor!
costPerMinuteInternational: aCountry
	" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts destinationCountry |
	destinationCountry:= self destinationCountry.
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational:!public! !

!InternationalCall methodsFor!
destination
"Returns destination country of the call"
	^ destinationCountry! !
!InternationalCall categoriesFor: #destination!public! !

!InternationalCall methodsFor!
costPerMinuteInternational: aCountry
	" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts destCountry |
	destCountry := self destinationCountry.
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: aCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational:!public! !

!InternationalCall methodsFor!
costPerMinuteInternational: aCountry
	" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts destCountry |
	destCountry := self destinationCountry.
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: destCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational:!public! !

!InternationalCall methodsFor!
costPerMinuteInternational: aCountry
	" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts destCountry |
	destCountry := self destination.
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: destCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational:!public! !

!InternationalCall methodsFor!
costPerMinuteInternational
	" Calculate cost per minute for an international call based on destuination country."
	| costPerMinute countryCosts destCountry |
	destCountry := self destination.
	countryCosts := Dictionary new.
	countryCosts
		at: 'USA' put: 0.50;
		at: 'Brazil' put: 0.44;
		at: 'Spain' put: 0.58;
		at: 'France' put: 0.60;
		at: 'Japan' put: 0.81;
		at: 'India' put: 0.75;
		at: 'Canada' put: 0.53;
		at: 'UK' put: 0.65.
	costPerMinute := countryCosts at: destCountry ifAbsent: [0.90].	"If the destination country does not match any counrty in the pre loaded list, cost per minute will be a default cost (0.90 in this case)."
	^costPerMinute! !
!InternationalCall categoriesFor: #costPerMinuteInternational!public! !

InternationalCall removeSelector: #costPerMinuteInternational: ifAbsent: []!

!InternationalCall methodsFor!
loadCall: aDuration day: aDay origin: aOrigin startTime: aTime destination: aDestination
"Initialize national calls"
	self loadCall: aDuration day: aDay origin: aOrigin startTime: aTime.
	destinationCountry := aDestination.! !
!InternationalCall categoriesFor: #loadCall:day:origin:startTime:destination:!public! !

!InternationalCall methodsFor!
loadCall: aDuration day: aDay origin: aOrigin startTime: aTime destination: aDestination
"Initialize national calls"
	self loadCall: aDuration day: aDay origin: aOrigin startTime: aTime.
	destinationCountry := aDestination.! !
!InternationalCall categoriesFor: #loadCall:day:origin:startTime:destination:!public! !

InternationalCall removeSelector: #initializeDuration:type:origin:destination:country: ifAbsent: []!

!InternationalCall methodsFor!
cost 
"Calculate international call cost based on destination and country"
	| costPerMinute |
	costPerMinute := self costPerMinuteInternational.
	^duration * costPerMinute
! !
!InternationalCall categoriesFor: #cost!public! !

!InternationalCall methodsFor!
cost 
"Calculate international call cost based on destination and country"
	| costPerMinute aDuration |
	aDuration := duration.
	costPerMinute := self costPerMinuteInternational.
	^aDuration * costPerMinute
! !
!InternationalCall categoriesFor: #cost!public! !

!InternationalCall methodsFor!
cost 
"Calculate international call cost based on destination and country"
	| costPerMinute aDuration |
	aDuration := duration.
	costPerMinute := self costPerMinuteInternational.
	^aDuration * costPerMinute
! !
!InternationalCall categoriesFor: #cost!public! !

!InternationalCall methodsFor!
cost 
"Calculate international call cost based on destination and country"
	| costPerMinute aDuration |
	aDuration := duration.
	costPerMinute := self costPerMinuteInternational.
	^aDuration * costPerMinute
! !
!InternationalCall categoriesFor: #cost!public! !

| factura intCall1 intCall2 totalAmount |

factura := Bill new.
factura initialize.

intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18 destination: 'USA'.

factura addCall: intCall1.
factura addCall: intCall2.

Transcript show: 'El precio por minuto es: ', (intCall1 costPerMinuteInternational ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (intCall1 cost) printString; cr.
Transcript show: 'El precio por minuto es: ', (intCall2 costPerMinuteInternational ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (intCall2 cost) printString; cr.
Transcript show: 'El precio total de la factura es: ', (factura totalCost ) printString; cr.
!

| factura intCall1 intCall2 totalAmount |

factura := Bill new.
factura initialize.

intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18 destination: 'USA'.

factura addCall: intCall1.
factura addCall: intCall2.

Transcript show: 'El precio por minuto es: ', (intCall1 costPerMinuteInternational ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (intCall1 cost) printString; cr.
Transcript show: 'El precio por minuto es: ', (intCall2 costPerMinuteInternational ) printString; cr.
Transcript show: 'El precio total de la llamada es $', (intCall2 cost) printString; cr.
Transcript show: 'El precio total de la factura es: ', (factura totalCost ) printString; cr.
!

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	super initialize.
	basicMonthlyFee := 15. "Let's assume a basic rate per bill"
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

"18:05:55, 12 May 2024: Image saved"!

"18:05:59, 12 May 2024: Image saved"!

| bill localCall1 localCall2 totalCost1 |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.

totalCost1 := bill totalCost.
Transcript show: 'El precio total de la factura es $', (totalCost1) printString; cr.
!

!NationalCall methodsFor!
costPerMinuteForDestination
    "Calculate the cost per minute of national calls depending the destination location."
	| costPerMinute aDestination|
	aDestination := self destination.
	DESTINATION_COSTS := Dictionary new.
	DESTINATION_COSTS
		at: 'Buenos Aires' put: 0.20;
		at: 'Cordoba' put: 0.28;
		at: 'Rosario' put: 0.22;
		at: 'Mendoza' put: 0.25;
		at: 'Mar del Plata' put: 0.30.
	costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
	^ costPerMinute! !
!NationalCall categoriesFor: #costPerMinuteForDestination!public! !

!NationalCall methodsFor!
costPerMinuteForDestination
    "Calculate the cost per minute of national calls depending the destination location."
	| costPerMinute aDestination|
	aDestination := self destination.
	DESTINATION_COSTS := Dictionary new.
	DESTINATION_COSTS
		at: 'Buenos Aires' put: 0.20;
		at: 'Cordoba' put: 0.28;
		at: 'Rosario' put: 0.22;
		at: 'Mendoza' put: 0.25;
		at: 'Mar del Plata' put: 0.30.
	costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
	^ costPerMinute! !
!NationalCall categoriesFor: #costPerMinuteForDestination!public! !

!NationalCall methodsFor!
costPerMinuteForDestination
    "Calculate the cost per minute of national calls depending the destination location."
	| costPerMinute aDestination|
	aDestination := self destination.
	DESTINATION_COSTS := Dictionary new.
	DESTINATION_COSTS
		at: 'Buenos Aires' put: 0.20;
		at: 'Cordoba' put: 0.28;
		at: 'Rosario' put: 0.22;
		at: 'Mendoza' put: 0.25;
		at: 'Mar del Plata' put: 0.30.
	costPerMinute := DESTINATION_COSTS at: aDestination ifAbsent: [0.40]. "If the destination of call is not in the list, call's cost will take a default price (0.40 here)"
	^ costPerMinute! !
!NationalCall categoriesFor: #costPerMinuteForDestination!public! !

!Bill methodsFor!
numberOfCalls
""! !
!Bill categoriesFor: #numberOfCalls!public! !

!Bill methodsFor!
numberOfCalls
"Return the amount of calls per bill."
	^ calls size.! !
!Bill categoriesFor: #numberOfCalls!public! !

!Bill methodsFor!
showBill
"Print the bill in a friendly format"
	Transcript show: 'Detailed Bill'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Date: ', Date today printString; cr.
	Transcript show: 'Call Details:'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Total: ', self totalCost printString; cr.
	Transcript show: '-------------------'; cr.
	Transcript show: 'Thank you for your preference!!'; cr.
	Transcript show: '-------------------'; cr.! !
!Bill categoriesFor: #showBill!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create calls instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda 'startTime: 9.00destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall3 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Customer: ', self customerName; cr.
Transcript show: 'Address: ', self customerAddress; cr.
Transcript show: 'Phone: ', self customerPhone; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
self calls do: [:call |
Transcript show: 'Type: ', (call class name); cr.
Transcript show: 'Duration: ', call duration printString, ' minutes'; cr.
Transcript show: 'Day: ', call day printString; cr.
Transcript show: 'Time of the Call: ', call startTime printString; cr.

(call isKindOf: LocalCall) ifTrue: [
    Transcript show: 'Origin: ', call origin; cr.
    Transcript show: 'Cost Per Minute: ', LocalCall BUSINESS_COST printString; cr.
].

(call isKindOf: NationalCall) ifTrue: [
    Transcript show: 'Origin: ', call origin; cr.
    Transcript show: 'Destination: ', (call destination); cr.
    Transcript show: 'Cost Per Minute for Destination: ', (call costPerMinuteForDestination) printString; cr.
].

(call isKindOf: InternationalCall) ifTrue: [
    Transcript show: 'Destination: ', (call destination); cr.
    Transcript show: 'Destination Country: ', (call destinationCountry); cr.
    Transcript show: 'Cost Per Minute International: ', (call costPerMinuteInternational) printString; cr.
].

Transcript show: 'Cost: ', call cost printString; cr.
Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', self totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.


!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create calls instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda 'startTime: 9.00destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall3 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
self calls do: [:call |
Transcript show: 'Type: ', (call class name); cr.
Transcript show: 'Duration: ', call duration printString, ' minutes'; cr.
Transcript show: 'Day: ', call day printString; cr.
Transcript show: 'Time of the Call: ', call startTime printString; cr.

(call isKindOf: LocalCall) ifTrue: [
    Transcript show: 'Origin: ', call origin; cr.
    Transcript show: 'Cost Per Minute: ', LocalCall BUSINESS_COST printString; cr.
].

(call isKindOf: NationalCall) ifTrue: [
    Transcript show: 'Origin: ', call origin; cr.
    Transcript show: 'Destination: ', (call destination); cr.
    Transcript show: 'Cost Per Minute for Destination: ', (call costPerMinuteForDestination) printString; cr.
].

(call isKindOf: InternationalCall) ifTrue: [
    Transcript show: 'Destination: ', (call destination); cr.
    Transcript show: 'Destination Country: ', (call destinationCountry); cr.
    Transcript show: 'Cost Per Minute International: ', (call costPerMinuteInternational) printString; cr.
].

Transcript show: 'Cost: ', call cost printString; cr.
Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', self totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.


!

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

!Bill methodsFor!
addCall: aCall
"Adding a call to the bill."
	calls add: aCall.! !
!Bill categoriesFor: #addCall:!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create calls instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda 'startTime: 9.00destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall3 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
self calls do: [:call |
Transcript show: 'Type: ', (call class name); cr.
Transcript show: 'Duration: ', call duration printString, ' minutes'; cr.
Transcript show: 'Day: ', call day printString; cr.
Transcript show: 'Time of the Call: ', call startTime printString; cr.

(call isKindOf: LocalCall) ifTrue: [
    Transcript show: 'Origin: ', call origin; cr.
    Transcript show: 'Cost Per Minute: ', LocalCall BUSINESS_COST printString; cr.
].

(call isKindOf: NationalCall) ifTrue: [
    Transcript show: 'Origin: ', call origin; cr.
    Transcript show: 'Destination: ', (call destination); cr.
    Transcript show: 'Cost Per Minute for Destination: ', (call costPerMinuteForDestination) printString; cr.
].

(call isKindOf: InternationalCall) ifTrue: [
    Transcript show: 'Destination: ', (call destination); cr.
    Transcript show: 'Destination Country: ', (call destinationCountry); cr.
    Transcript show: 'Cost Per Minute International: ', (call costPerMinuteInternational) printString; cr.
].

Transcript show: 'Cost: ', call cost printString; cr.
Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', self totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.


!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', LocalCall BUSINESS_COST printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destinationCountry); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Call methodsFor!
origin
"Return the origin of teh call"
	^origin! !
!Call categoriesFor: #origin!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', LocalCall BUSINESS_COST printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destinationCountry); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!LocalCall methodsFor!
businessCost
"Return business cost"
	^BUSINESS_COST! !
!LocalCall categoriesFor: #businessCost!public! !

!LocalCall methodsFor!
normalCost
"Return the value of minute of call out of business time"
	^NORMAL_COST! !
!LocalCall categoriesFor: #normalCost!public! !

!LocalCall methodsFor!
weekendCost
"Return the value of minute of call at weekends"
	^WEEKEND_COST! !
!LocalCall categoriesFor: #weekendCost!public! !

!LocalCall methodsFor!
weekendCost
"Return the value of minute of call at weekends"
	^WEEKEND_COST! !
!LocalCall categoriesFor: #weekendCost!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (LocalCall businessCost) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destinationCountry); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destinationCountry); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Time of the Call: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute for Destination: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost Per Minute International: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost: ', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total: ', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 totalCost1 |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (Date dayOfWeek: localCall1 day) printString; cr.

totalCost1 := bill totalCost.
Transcript show: 'El precio total de la factura es $', (totalCost1) printString; cr.
!

| bill localCall1 localCall2 totalCost1 |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (Date dayOfWeek: localCall1 super day) printString; cr.

totalCost1 := bill totalCost.
Transcript show: 'El precio total de la factura es $', (totalCost1) printString; cr.
!

| bill localCall1 localCall2 totalCost1 |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (Date dayOfWeek: localCall1 day) printString; cr.

totalCost1 := bill totalCost.
Transcript show: 'El precio total de la factura es $', (totalCost1) printString; cr.
!

| bill localCall1 localCall2 totalCost1 |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'El precio por minuto es: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'El precio total de la llamada es $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (Date dayOfWeek: localCall1 day) printString; cr.

totalCost1 := bill totalCost.
Transcript show: 'El precio total de la factura es $', (totalCost1) printString; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', (Date dayOfWeek: aCall day) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', (aCall day isKindOf: Date 
                               ifTrue: [aCall day dayOfWeek printString]
                               ifFalse: ['Unknown']); cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', (aCall day isKindOf: Date 
                               ifTrue: [aCall day dayOfWeek printString]
                               ifFalse: ['Unknown']); cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Call methodsFor!
day
	"Returns the day of the call"
	| dayNames dayIndex |
	dayNames := #( 'Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday' 'Sunday').
	dayIndex := day.
	^ dayNames at: dayIndex! !
!Call categoriesFor: #day!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall day printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!LocalCall methodsFor!
dayName
	"Returns the name of the day"
	| dayNames |
	dayNames := #('Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday' 'Sunday').
		^ dayNames at: self day! !
!LocalCall categoriesFor: #dayName!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', aCall dayName printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Call methodsFor!
day
	"Returns the day of the call"
	^day! !
!Call categoriesFor: #day!public! !

!Call methodsFor!
day
	"Returns the day of the call"
	^day! !
!Call categoriesFor: #day!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Call methodsFor!
dayName
	"Returns the name of the day"
	| dayNames |
	dayNames := #('Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday' 'Sunday').
		^ dayNames at: self day! !
!Call categoriesFor: #dayName!public! !

LocalCall removeSelector: #dayName ifAbsent: []!

Object subclass: #Call
	instanceVariableNames: 'duration day origin startTime'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.30 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.20 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.00 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.30 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.10 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

Object subclass: #Call
	instanceVariableNames: 'duration day origin startTime date'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Call methodsFor!
loadCall: aDuration day: aDay origin: aOrigin startTime: aTime
	"Initialize the call with its duration, type, source, and destination"
	super initialize.
	duration := aDuration.
	day := aDay .
	origin := aOrigin.
	startTime := aTime.
	date := Date today.! !
!Call categoriesFor: #loadCall:day:origin:startTime:!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Call methodsFor!
date
"Return date of call"
	^date! !
!Call categoriesFor: #date!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', ( (aCall date) asString ) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr.
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Bill methodsFor!
basicFee
"Returns the basic amount for every fee"
	^basicMonthlyFee! !
!Bill categoriesFor: #basicFee!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Basic rate: $', bill basicFee printString; cr.
Transcript show: 'Total cost of the bill: $', bill totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	super initialize.
	basicMonthlyFee := 15.45 . "Let's assume a basic rate per bill"
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
initialize
    "Initialize the bill with a basic monthly fee and an empty list of calls"
	super initialize.
	basicMonthlyFee := 15.45 . "Let's assume a basic rate per bill"
	calls := OrderedCollection new.

! !
!Bill categoriesFor: #initialize!public! !

!Bill methodsFor!
totalCost
	"Calculate the total cost of the bill. totalCost will be equal the sum of the basic monthly fee and the cost of the calls"
	| totalCost |
	totalCost := 0.
	calls do: [ :aCall |
		totalCost := totalCost + aCall cost.
		].
	^ totalCost.! !
!Bill categoriesFor: #totalCost!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Basic rate: $', bill basicFee printString; cr.
Transcript show: 'Total cost of calls: $', bill totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill totalCost + bill basicFee )printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

"19:36:35, 12 May 2024: Image saved"!

"19:36:40, 12 May 2024: Image saved"!

!Bill methodsFor!
showBill
"Print the bill in a friendly format"
	"Print the bill in a friendly format"
	| aBill |
	Transcript show: 'Detailed Bill'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Date: ', Date today printString; cr.
	Transcript show: 'Call Details:'; cr.
	Transcript show: '-------------------'; cr.
	aBill  calls do: [:aCall |
	    Transcript show: 'Type: ', (aCall class name); cr.
	    Transcript show: 'Date: ', (aCall date) printString ; cr.
	    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
	    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
	    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

	    (aCall isKindOf: LocalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
	    ].

	    (aCall isKindOf: NationalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Destination: ', (aCall destination); cr.
		Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
	    ].

	    (aCall isKindOf: InternationalCall) ifTrue: [
		Transcript show: 'Destination Country: ', (aCall destination); cr.
		Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
	    ].

	    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
	    Transcript show: '-------------------'; cr.
	].

	Transcript show: 'Basic rate: $', aBill  basicFee printString; cr.
	Transcript show: 'Total cost of calls: $', aBill  totalCost printString; cr.
	Transcript show: 'Total cost of bill: $', (aBill  totalCost + aBill  basicFee )printString; cr.
	Transcript show: '-------------------'; cr.
	Transcript show: 'Thank you for your preference!!'; cr.
	Transcript show: '-------------------'; cr.
! !
!Bill categoriesFor: #showBill!public! !

!Bill methodsFor!
showBill
"Print the bill in a friendly format"
	"Print the bill in a friendly format"
	| aBill |
	aBill := self.
	Transcript show: 'Detailed Bill'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Date: ', Date today printString; cr.
	Transcript show: 'Call Details:'; cr.
	Transcript show: '-------------------'; cr.
	aBill  calls do: [:aCall |
	    Transcript show: 'Type: ', (aCall class name); cr.
	    Transcript show: 'Date: ', (aCall date) printString ; cr.
	    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
	    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
	    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

	    (aCall isKindOf: LocalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
	    ].

	    (aCall isKindOf: NationalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Destination: ', (aCall destination); cr.
		Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
	    ].

	    (aCall isKindOf: InternationalCall) ifTrue: [
		Transcript show: 'Destination Country: ', (aCall destination); cr.
		Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
	    ].

	    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
	    Transcript show: '-------------------'; cr.
	].

	Transcript show: 'Basic rate: $', aBill  basicFee printString; cr.
	Transcript show: 'Total cost of calls: $', aBill  totalCost printString; cr.
	Transcript show: 'Total cost of bill: $', (aBill  totalCost + aBill  basicFee )printString; cr.
	Transcript show: '-------------------'; cr.
	Transcript show: 'Thank you for your preference!!'; cr.
	Transcript show: '-------------------'; cr.
! !
!Bill categoriesFor: #showBill!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

bill showBill.!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

bill showBill.!

!Bill methodsFor!
showBill
"Print the bill in a friendly format"
	"Print the bill in a friendly format"
	| aBill |
	aBill := self.
	Transcript show: 'Detailed Bill'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Date: ', Date today printString; cr.
	Transcript show: 'Call Details:'; cr.
	Transcript show: '-------------------'; cr.
	aBill  calls do: [:aCall |
	    Transcript show: 'Type: ', (aCall class name); cr.
	    Transcript show: 'Date: ', (aCall date) printString ; cr.
	    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
	    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
	    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

	    (aCall isKindOf: LocalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
	    ].

	    (aCall isKindOf: NationalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Destination: ', (aCall destination); cr.
		Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
	    ].

	    (aCall isKindOf: InternationalCall) ifTrue: [
		Transcript show: 'Destination Country: ', (aCall destination); cr.
		Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
	    ].

	    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
	    Transcript show: '-------------------'; cr.
	].

	Transcript show: 'Basic rate: $', aBill  basicFee printString; cr.
	Transcript show: 'Total cost of calls: $', aBill  totalCost printString; cr.
	Transcript show: 'Total cost of bill: $', (aBill  totalCost + aBill  basicFee )printString; cr.
	Transcript show: '-------------------'; cr.
	Transcript show: 'Thank you for your preference!!'; cr.
	Transcript show: '-------------------'; cr.
! !
!Bill categoriesFor: #showBill!public! !

!Bill methodsFor!
showBill
"Print the bill in a friendly format"
	"Print the bill in a friendly format"
	| aBill |
	aBill := self.
	Transcript show: 'Detailed Bill'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Date: ', Date today printString; cr.
	Transcript show: 'Call Details:'; cr.
	Transcript show: '-------------------'; cr.
	aBill  calls do: [:aCall |
	    Transcript show: 'Type: ', (aCall class name); cr.
	    Transcript show: 'Date: ', (aCall date) printString ; cr.
	    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
	    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
	    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

	    (aCall isKindOf: LocalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
	    ].

	    (aCall isKindOf: NationalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Destination: ', (aCall destination); cr.
		Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
	    ].

	    (aCall isKindOf: InternationalCall) ifTrue: [
		Transcript show: 'Destination Country: ', (aCall destination); cr.
		Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
	    ].

	    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
	    Transcript show: '-------------------'; cr.
	].

	Transcript show: 'Basic rate: $', aBill  basicFee printString; cr.
	Transcript show: 'Total cost of calls: $', aBill  totalCost printString; cr.
	Transcript show: 'Total cost of bill: $', (aBill  totalCost + aBill  basicFee )printString; cr.
	Transcript show: '-------------------'; cr.
	Transcript show: 'Thank you for your preference!!'; cr.
	Transcript show: '-------------------'; cr.
! !
!Bill categoriesFor: #showBill!public! !

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

bill showBill.!

!Bill methodsFor!
showBill
"Print the bill in a friendly format"
	"Print the bill in a friendly format"
	| aBill |
	aBill := self.
	Transcript show: 'Detailed Bill'; cr.
	Transcript show: '-------------------'; cr.

	Transcript show: 'Date: ', Date today printString; cr.
	Transcript show: 'Call Details:'; cr.
	Transcript show: '-------------------'; cr.
	aBill  calls do: [:aCall |
	    Transcript show: 'Type: ', (aCall class name); cr.
	    Transcript show: 'Date: ', (aCall date) printString ; cr.
	    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
	    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
	    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

	    (aCall isKindOf: LocalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
	    ].

	    (aCall isKindOf: NationalCall) ifTrue: [
		Transcript show: 'Origin: ', aCall origin; cr.
		Transcript show: 'Destination: ', (aCall destination); cr.
		Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
	    ].

	    (aCall isKindOf: InternationalCall) ifTrue: [
		Transcript show: 'Destination Country: ', (aCall destination); cr.
		Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
	    ].

	    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
	    Transcript show: '-------------------'; cr.
	].

	Transcript show: 'Basic rate: $', aBill  basicFee printString; cr.
	Transcript show: 'Total cost of calls: $', aBill  totalCost printString; cr.
	Transcript show: 'Total cost of bill: $', (aBill  totalCost + aBill  basicFee )printString; cr.
	Transcript show: '-------------------'; cr.
	Transcript show: 'Thank you for your preference!!'; cr.
	Transcript show: '-------------------'; cr.
! !
!Bill categoriesFor: #showBill!public! !

"19:51:41, 12 May 2024: Image saved"!

"19:52:15, 12 May 2024: Image saved"!

"19:52:44, 12 May 2024: Image saved"!

"19:53:07, 12 May 2024: Image saved"!

"19:53:11, 12 May 2024: Image saved"!

"21:22:51, 12 May 2024: Dolphin Smalltalk Professional started"!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall businessCost ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Basic rate: $', bill basicFee printString; cr.
Transcript show: 'Total cost of calls: $', bill totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill totalCost + bill basicFee )printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (Date dayOfWeek: localCall1 day) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', (Date dayOfWeek: localCall2 day) printString; cr.

totalCost = localCall1 cost + localCall2 cost
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost = localCall1 cost + localCall2 cost
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 10 day: 3 origin: 'casilda' startTime: 10.

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 6 origin: 'casilda' startTime: 13.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost = localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 14.02 day: 3 origin: 'Rosario' startTime: 13.55 destination: '' .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 2.43 day: 1 origin: 'Entre rios' startTime: 22.14.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost = localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

bill showBill.!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 2.43 day: 1 origin: 'Entre rios' startTime: 22.14.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost = localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

!LocalCall methodsFor!
cost
    "Calculate the cost of the local call based on the hour of the day and doy of the week"
	| callDuration callDay  costPerMinute |
	callDuration := super duration.
	costPerMinute := self costPerMinute.
	^ callDuration * costPerMinute
! !
!LocalCall categoriesFor: #cost!public! !

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 2.43 day: 1 origin: 'Entre rios' startTime: 22.14.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost = localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall costPerMinute ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Basic rate: $', bill basicFee printString; cr.
Transcript show: 'Total cost of calls: $', bill totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill totalCost + bill basicFee )printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall costPerMinute ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Basic rate: $', bill basicFee printString; cr.
Transcript show: 'Total cost of calls: $', bill totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill totalCost + bill basicFee )printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 2.43 day: 1 origin: 'Entre rios' startTime: 22.14.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost := localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 2.43 day: 1 origin: 'Entre rios' startTime: 22.14.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.

Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.

totalCost := localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| bill localCall1 localCall2 totalCost |

"Instantiate Bill"
bill := Bill new.
bill initialize.

"Create a LocalCall instance"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 2.43 day: 1 origin: 'Entre rios' startTime: 22.14.

"Add the local call to the bill"
bill addCall: localCall1.
bill addCall: localCall2.

Transcript show: 'Cost per minute in call 1: ', (localCall1 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 1: $', (localCall1 cost ) printString; cr.
Transcript show: 'Day: ', (localCall1 date ) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Cost per minute in call 2: ', (localCall2 costPerMinute) printString; cr.
Transcript show: 'Total cost of call 2: $', (localCall2 cost ) printString; cr.
Transcript show: 'Day: ', ( localCall2 date ) printString; cr.
Transcript show: '-------------------'; cr.
totalCost := localCall1 cost + localCall2 cost.
Transcript show: 'Basic rate: $', bill  basicFee printString; cr.
Transcript show: 'Total cost of calls: $', totalCost printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Total cost of bill: $', (bill  totalCost + totalCost)printString; cr.!

| factura intCall1 intCall2 totalAmount |

factura := Bill new.
factura initialize.

intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18 destination: 'USA'.

factura addCall: intCall1.
factura addCall: intCall2.

Transcript show: 'El precio por minuto es: ', (intCall1 costPerMinuteInternational ) printString; cr.
Transcript show: 'El precio total de la llamada 1 es $', (intCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El precio por minuto es: ', (intCall2 costPerMinuteInternational ) printString; cr.
Transcript show: 'El precio total de la llamada 2 es $', (intCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El precio total de la factura es: ', (factura totalCost ) printString; cr.
!

| factura intCall1 intCall2 totalAmount |

factura := Bill new.
factura initialize.

intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18 destination: 'USA'.

factura addCall: intCall1.
factura addCall: intCall2.

Transcript show: 'The cost per minute is: ', (intCall1 costPerMinuteInternational ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (intCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El The cost per minute is: ', (intCall2 costPerMinuteInternational ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (intCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El precio total de la factura es: ', (factura totalCost ) printString; cr.
!

| factura intCall1 intCall2 totalAmount |

factura := Bill new.
factura initialize.

intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18 destination: 'USA'.

factura addCall: intCall1.
factura addCall: intCall2.

Transcript show: 'The cost per minute is: ', (intCall1 costPerMinuteInternational ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (intCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El The cost per minute is: ', (intCall2 costPerMinuteInternational ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (intCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Total bill cost is: $', (factura totalCost ) printString; cr.
!

| factura intCall1 intCall2 totalAmount |

factura := Bill new.
factura initialize.

intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime:  18 destination: 'USA'.

factura addCall: intCall1.
factura addCall: intCall2.

Transcript show: 'The cost per minute is: ', (intCall1 costPerMinuteInternational ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (intCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El The cost per minute is: ', (intCall2 costPerMinuteInternational ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (intCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total calls cost is: $', (factura totalCost ) printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'The cost per minute is: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (natCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El The cost per minute is: ', (natCall2 costPerMinuteForDestination  ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (natCall2 cost) printString; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

Transcript show: '-------------------'; cr.!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'The cost per minute is: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (natCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El The cost per minute is: ', (natCall2 costPerMinuteForDestination  ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (natCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'Type: ', (natCall1 class name); cr.
Transcript show: 'Date: ', (natCall1 date) printString ; cr.
Transcript show: 'Duration: ', natCall1 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall1 startTime printString, 'hs'; cr.
Transcript show: 'The cost per minute is: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (natCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'El The cost per minute is: ', (natCall2 costPerMinuteForDestination  ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (natCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.

Transcript show: 'Type: ', (natCall1 class name); cr.
Transcript show: 'Date: ', (natCall1 date) printString ; cr.
Transcript show: 'Duration: ', natCall1 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall1 startTime printString, 'hs'; cr.
Transcript show: 'The cost per minute is: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (natCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Type: ', (natCall2 class name); cr.
Transcript show: 'Date: ', (natCall2 date) printString ; cr.
Transcript show: 'Duration: ', natCall2 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall2 startTime printString, 'hs'; cr.
Transcript show: 'El The cost per minute is: ', (natCall2 costPerMinuteForDestination  ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (natCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.


Transcript show: 'Date: ', (natCall1 date) printString ; cr.
Transcript show: 'Duration: ', natCall1 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall1 startTime printString, 'hs'; cr.
Transcript show: 'Origin: ', natCall1 origin; cr.
Transcript show: 'Destination: ', (natCall1 destination); cr.
Transcript show: 'The cost per minute is: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (natCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Date: ', (natCall2 date) printString ; cr.
Transcript show: 'Duration: ', natCall2 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall2 startTime printString, 'hs'; cr.
Transcript show: 'Origin: ', natCall2 origin; cr.
Transcript show: 'Destination: ', (natCall2 destination); cr.
Transcript show: 'El The cost per minute is: ', (natCall2 costPerMinuteForDestination  ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (natCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

|factura natCall1 natCall2 |

factura := Bill new.
factura initialize.

natCall1 := NationalCall new.
natCall2 := NationalCall new.

natCall1 loadCall: 30 day: 4 origin: 'casilda 'startTime: '9'destination: 'Mendoza'.
natCall2 loadCall: 11 day: 7 origin: 'Rosario' startTime: 11 destination: 'Buenos Aires'.

factura addCall: natCall1.
factura addCall: natCall2.


Transcript show: 'Date: ', (natCall1 date) printString ; cr.
Transcript show: 'Duration: ', natCall1 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall1 startTime printString, 'hs'; cr.
Transcript show: 'Origin: ', natCall1 origin; cr.
Transcript show: 'Destination: ', (natCall1 destination); cr.
Transcript show: 'The cost per minute is: ', (natCall1 costPerMinuteForDestination ) printString; cr.
Transcript show: 'Cost of call 1 is: $', (natCall1 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Date: ', (natCall2 date) printString ; cr.
Transcript show: 'Duration: ', natCall2 duration printString, ' minutes'; cr.
Transcript show: 'Hour: ', natCall2 startTime printString, 'hs'; cr.
Transcript show: 'Origin: ', natCall2 origin; cr.
Transcript show: 'Destination: ', (natCall2 destination); cr.
Transcript show: 'El The cost per minute is: ', (natCall2 costPerMinuteForDestination  ) printString; cr.
Transcript show: 'Cost of call 2 is: $', (natCall2 cost) printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Basic rate: $', factura basicFee printString; cr.
Transcript show: 'Total cost of calls: $', factura totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (factura totalCost + factura basicFee )printString; cr.
Transcript show: '-------------------'; cr.
!

| bill localCall1 localCall2 localCall3 natCall1 natCall2 natCall3 natCall4 intCall1 intCall2 |

"Instantiate Bill"
bill := Bill new.
bill initialize.
"Create call instances"
localCall1 := LocalCall new.
localCall1 initialize.
localCall1 loadCall: 11 day: 3 origin: 'Casilda' startTime: 10.15 .

localCall2 := LocalCall new.
localCall2 initialize.
localCall2 loadCall: 18 day: 4 origin: 'Casilda' startTime: 13.37 .

localCall3 := LocalCall new.
localCall3 initialize.
localCall3 loadCall: 6 day: 6 origin: 'Casilda' startTime: 21.22 .

natCall1 := NationalCall new.
natCall2 := NationalCall new.
natCall3 := NationalCall new.
natCall4 := NationalCall new.

natCall1 loadCall: 14.20 day: 4 origin: 'Casilda' startTime: 9.05 destination: 'Mendoza'.
natCall2 loadCall: 11.43 day: 7 origin: 'Rosario' startTime: 11.33 destination: 'Buenos Aires'.
natCall3 loadCall: 1.30 day: 7 origin: 'Parana' startTime: 13.15 destination: 'Cordoba'.
natCall4 loadCall: 4.05 day: 2 origin: 'Junin' startTime: 23.05 destination: 'Mar del Plata'.


intCall1 := InternationalCall new.
intCall2 := InternationalCall new.

intCall1 loadCall: 7 day: 2 origin: 'Pujato' startTime: 4.21 destination: 'Japan'.
intCall2 loadCall: 2 day: 7 origin: 'Rosario' startTime: 18.35 destination: 'USA'.

"Add calls to the bill"
bill addCall: localCall1.
bill addCall: localCall2.
bill addCall: localCall3.
bill addCall: natCall1.
bill addCall: natCall2.
bill addCall: natCall3.
bill addCall: natCall4.
bill addCall: intCall1.
bill addCall: intCall2.

"Print the bill in a friendly format"

Transcript show: 'Detailed Bill'; cr.
Transcript show: '-------------------'; cr.

Transcript show: 'Date: ', Date today printString; cr.
Transcript show: 'Call Details:'; cr.
Transcript show: '-------------------'; cr.
bill calls do: [:aCall |
    Transcript show: 'Type: ', (aCall class name); cr.
    Transcript show: 'Date: ', (aCall date) printString ; cr.
    Transcript show: 'Duration: ', aCall duration printString, ' minutes'; cr.
    "Transcript show: 'Day: ', ((aCall dayName) asString) printString; cr."
    Transcript show: 'Hour: ', aCall startTime printString, 'hs'; cr.

    (aCall isKindOf: LocalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Cost Per Minute: ', (aCall costPerMinute ) printString; cr.
    ].

    (aCall isKindOf: NationalCall) ifTrue: [
        Transcript show: 'Origin: ', aCall origin; cr.
        Transcript show: 'Destination: ', (aCall destination); cr.
        Transcript show: 'Cost per minute: ', (aCall costPerMinuteForDestination) printString; cr.
    ].

    (aCall isKindOf: InternationalCall) ifTrue: [
        Transcript show: 'Destination Country: ', (aCall destination); cr.
        Transcript show: 'Cost per minutel: ', (aCall costPerMinuteInternational) printString; cr.
    ].

    Transcript show: 'Cost of this call: $', aCall cost printString; cr.
    Transcript show: '-------------------'; cr.
].

Transcript show: 'Basic rate: $', bill basicFee printString; cr.
Transcript show: 'Total cost of calls: $', bill totalCost printString; cr.
Transcript show: 'Total cost of bill: $', (bill totalCost + bill basicFee )printString; cr.
Transcript show: '-------------------'; cr.
Transcript show: 'Thank you for your preference!!'; cr.
Transcript show: '-------------------'; cr.
!

"22:32:13, 12 May 2024: Image saved"!

"22:32:22, 12 May 2024: Image saved"!

"22:32:29, 12 May 2024: Image saved"!

"22:32:33, 12 May 2024: Image saved"!

